name: Run Terraform in staging

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]

defaults:
  run:
    working-directory: terraform/stage

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: stage
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_STATE_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_STATE_SECRET_ACCESS_KEY }}
      TF_VAR_cf_user: ${{ secrets.CF_USERNAME }}
      TF_VAR_cf_password: ${{ secrets.CF_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform format
        id: format
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validation
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false

      # inspiration: https://learn.hashicorp.com/tutorials/terraform/github-actions#review-actions-workflow
      - name: Update PR
        uses: actions/github-script@v4
        # we would like to update the PR even when a prior step failed
        if: ${{ always() }} && github.event_name == 'pull_request'
        with:
          script: |
            const output = `Terraform Format and Style: ${{ steps.format.outcome }}
            Terraform Initialization: ${{ steps.init.outcome }}
            Terraform Validation: ${{ steps.validation.outcome }}
            Terraform Plan: ${{ steps.plan.outcome }}

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform plan status
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
